{"version":3,"file":"static/js/896.09de7a37.chunk.js","mappings":"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","sources":["Styles/StyledDiv.js","Styles/StyledInputBase.js","components/Search/options.jsx","components/Search/search.jsx","utils/fetchUtils.js"],"sourcesContent":["import { alpha, styled } from '@mui/material/styles';\r\n\r\nexport const StyledDiv = styled('div')(({ theme }) => ({\r\n  '.bgColor ': {\r\n    background:\r\n      theme.palette.mode === 'dark'\r\n        ? theme.palette.common.black\r\n        : `linear-gradient(to right bottom,${theme.palette.primary.light},${theme.palette.primary.main},${theme.palette.primary.dark} )`,\r\n  },\r\n}));\r\n\r\nexport const SearchDiv = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginRight: theme.spacing(2),\r\n  marginLeft: 0,\r\n  width: '90%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(3),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\nexport const SearchIconDiv = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 0.5),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  color: 'white',\r\n}));\r\n","import { styled } from '@mui/material/styles';\r\nimport { InputBase } from '@mui/material';\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    focus: true,\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '30ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default StyledInputBase;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\n\r\nconst Options = ({ props, option }) => (\r\n  <li {...props}>\r\n    <Grid container alignItems=\"center\">\r\n      <Grid item>\r\n        <Box sx={{ color: 'text.secondary', mr: 2 }}>{option.revision}</Box>\r\n      </Grid>\r\n      <Grid item xs>\r\n        <Typography\r\n          component=\"span\"\r\n          variant=\"subtitle1\"\r\n          color=\"text.secondary\"\r\n          style={{\r\n            fontWeight: 700,\r\n          }}\r\n        >\r\n          {option.title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Name : {option.name}-{option.revision}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Owner : {option.owner}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Description : {option.description}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  </li>\r\n);\r\n\r\nOptions.propTypes = {\r\n  props: PropTypes.any.isRequired,\r\n  option: PropTypes.object.isRequired,\r\n};\r\nexport default Options;\r\n","import SearchIcon from '@mui/icons-material/Search';\r\nimport { Autocomplete, CircularProgress } from '@mui/material';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as EnoviaApi from '../../api/EnoviaApi';\r\nimport Paths from '../../helper/Paths';\r\nimport toast from '../../helper/toast';\r\nimport { SearchDiv, SearchIconDiv } from '../../Styles/StyledDiv';\r\nimport StyledInputBase from '../../Styles/StyledInputBase';\r\nimport { authenticateTableData } from '../../utils/CommonUtils';\r\nimport { debounce } from '../../utils/fetchUtils';\r\nimport { TYPES } from '../../utils/ServiceUtils';\r\nimport { formatRows } from '../../utils/TableUtils';\r\nimport { DEFAULT_COLUMNS } from '../Table/Columns/DefaultColumns';\r\nimport Options from './options';\r\n\r\nconst type = TYPES[0];\r\n\r\nconst TechniaSearch = () => {\r\n  const columns = DEFAULT_COLUMNS;\r\n  const [loading, setLoading] = useState(false);\r\n  const [options, setOptions] = useState([\r\n    {\r\n      id: '',\r\n      type: '',\r\n      name: '',\r\n      revision: '',\r\n      title: '',\r\n      current: '',\r\n      description: '',\r\n      owner: '',\r\n    },\r\n  ]);\r\n  const [value, setValue] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const fetch = useMemo(\r\n    () =>\r\n      debounce(\r\n        _.throttle(async ({ input }, callback) => {\r\n          try {\r\n            setLoading(true);\r\n            const response = await EnoviaApi.searchObjects(type, 30, 0, input);\r\n            callback(response);\r\n            setLoading(false);\r\n            return response;\r\n          } catch (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n            toast.error(`Error: ${error}`);\r\n          }\r\n          return null;\r\n        }, 800),\r\n        500\r\n      ),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n    if (inputValue === '') {\r\n      setOptions(value ? [value] : []);\r\n      return undefined;\r\n    }\r\n    fetch({ input: inputValue }, (response) => {\r\n      if (active && authenticateTableData(response)) {\r\n        const allRows = formatRows(response, columns);\r\n        setOptions(allRows);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      active = false;\r\n      setLoading(false);\r\n    };\r\n  }, [value, inputValue, fetch, columns]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"enovia-api-search\"\r\n      loading={loading}\r\n      options={options}\r\n      value={value}\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      autoComplete\r\n      filterOptions={(x) => x}\r\n      getOptionLabel={(option) =>\r\n        typeof option === 'string' ? option : option.title\r\n      }\r\n      renderTags={() => null}\r\n      noOptionsText=\"No Objects Found\"\r\n      disableCloseOnSelect\r\n      onChange={(event, newValue) => {\r\n        event.preventDefault();\r\n        setValue(null);\r\n        const path = `${Paths.TYPE}/${type}/${newValue.id}`;\r\n        navigate(path);\r\n        setLoading(false);\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      renderOption={(props, option) => (\r\n        <Options props={props} option={option} key={option.id} />\r\n      )}\r\n      renderInput={(params) => (\r\n        <SearchDiv component=\"div\">\r\n          <SearchIconDiv>\r\n            <SearchIcon />\r\n          </SearchIconDiv>\r\n          <StyledInputBase\r\n            ref={params.InputProps.ref}\r\n            placeholder=\"Search…\"\r\n            inputProps={params.inputProps}\r\n            endAdornment={\r\n              loading ? (\r\n                <CircularProgress color=\"inherit\" style={{ padding: '10px' }} />\r\n              ) : null\r\n            }\r\n          />\r\n        </SearchDiv>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TechniaSearch;\r\n","import { authenticateTableData } from './CommonUtils';\r\n\r\nconst cache = {};\r\nexport const fetchResponse = async (url, options, cacheKey) => {\r\n  let resBody;\r\n  if (cacheKey && cache[cacheKey]) {\r\n    resBody = cache[cacheKey];\r\n  } else {\r\n    const response = await fetch(url, options);\r\n    resBody = await response.json();\r\n    if (cacheKey && authenticateTableData(resBody?.data))\r\n      cache[cacheKey] = resBody;\r\n  }\r\n\r\n  return resBody;\r\n};\r\n\r\n/**\r\n * Execute a function given a delay time\r\n *\r\n * @param {type} func\r\n * @param {type} wait\r\n * @param {type} immediate\r\n * @returns {Function}\r\n */\r\nexport const debounce = function (func, wait, immediate) {\r\n  let timeout;\r\n  return function () {\r\n    // eslint-disable-next-line one-var\r\n    const context = this,\r\n      // eslint-disable-next-line prefer-rest-params\r\n      args = arguments;\r\n    const later = function () {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n};\r\n"],"names":["StyledDiv","styled","theme","background","palette","mode","common","black","primary","light","main","dark","SearchDiv","position","borderRadius","shape","backgroundColor","alpha","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconDiv","padding","height","pointerEvents","display","alignItems","justifyContent","color","InputBase","focus","paddingLeft","transition","transitions","create","props","option","Grid","container","item","Box","sx","mr","revision","xs","Typography","component","variant","style","fontWeight","title","name","owner","description","type","TYPES","columns","DEFAULT_COLUMNS","useState","loading","setLoading","id","current","options","setOptions","value","setValue","inputValue","setInputValue","navigate","useNavigate","fetch","useMemo","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","_","callback","input","EnoviaApi","response","console","error","toast","useEffect","active","authenticateTableData","allRows","formatRows","Autocomplete","includeInputInList","filterSelectedOptions","autoComplete","filterOptions","x","getOptionLabel","renderTags","noOptionsText","disableCloseOnSelect","onChange","event","newValue","preventDefault","path","Paths","onInputChange","newInputValue","renderOption","renderInput","params","Search","ref","InputProps","placeholder","inputProps","endAdornment","CircularProgress"],"sourceRoot":""}