{"version":3,"file":"static/js/177.9696f516.chunk.js","mappings":"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","sources":["Styles/StyledMenu.js","utils/ExportUtils.js","components/Button/Export.jsx","components/Button/TableButton.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Menu } from '@mui/material';\r\nimport { styled, alpha } from '@mui/material/styles';\r\n\r\nconst StyledMenu = styled((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'right',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'right',\r\n    }}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  '& .MuiPaper-root': {\r\n    borderRadius: 6,\r\n    marginTop: theme.spacing(1),\r\n    minWidth: 180,\r\n    color:\r\n      theme.palette.mode === 'light'\r\n        ? 'rgb(55, 65, 81)'\r\n        : theme.palette.grey[300],\r\n    boxShadow:\r\n      'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\r\n    '& .MuiMenu-list': {\r\n      padding: '4px 0',\r\n    },\r\n    '& .MuiMenuItem-root': {\r\n      '& .MuiSvgIcon-root': {\r\n        fontSize: 18,\r\n        color: theme.palette.text.secondary,\r\n        marginRight: theme.spacing(1.5),\r\n      },\r\n      '&:active': {\r\n        backgroundColor: alpha(\r\n          theme.palette.primary.main,\r\n          theme.palette.action.selectedOpacity\r\n        ),\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default StyledMenu;\r\n","import Excel from 'exceljs';\r\nimport saveAs from 'file-saver';\r\nimport Colors from '../helper/Colors';\r\nimport { flattenWithLevel } from './ArrayUtils';\r\n\r\nconst LEVEL = {\r\n  id: 'level',\r\n  header: 'Level',\r\n};\r\n\r\nexport const createWorkbook = () => new Excel.Workbook();\r\n\r\nexport const createSheet = (excelWorkbook, name) =>\r\n  excelWorkbook.addWorksheet(name);\r\n\r\nconst addFilter = (workSheet, columns) => {\r\n  workSheet.autoFilter = {\r\n    from: {\r\n      row: 1,\r\n      column: 1,\r\n    },\r\n    to: {\r\n      row: 1,\r\n      column: columns.length,\r\n    },\r\n  };\r\n  workSheet.views = [{ state: 'frozen', ySplit: 2, xSplit: 1 }];\r\n};\r\n\r\nconst addLevelColumn = (worksheet, headerRow, level) => {\r\n  const levelColumn = worksheet.getColumn(level);\r\n  levelColumn.width = 10;\r\n  levelColumn.style = {\r\n    font: {\r\n      bold: true,\r\n    },\r\n  };\r\n  headerRow.getCell(level).value = LEVEL.header;\r\n};\r\n\r\nconst addConditions = (worksheet, rows) => {\r\n  const size = rows.length;\r\n  console.log(size);\r\n  worksheet.addConditionalFormatting({\r\n    ref: `A2:O${size}`,\r\n    rules: [\r\n      {\r\n        type: 'expression',\r\n        formulae: ['MOD(ROW(),2)=0'],\r\n        style: {\r\n          fill: {\r\n            type: 'pattern',\r\n            pattern: 'solid',\r\n            bgColor: { argb: 'D3D3D3' },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\n/**\r\n * add first column as LEVEL,\r\n * add other table columns\r\n * @param {*} worksheet\r\n * @param {table-columns} columns\r\n */\r\nexport const addHeaders = (worksheet, columns) => {\r\n  const headerRow = worksheet.addRow();\r\n  headerRow.fill = {\r\n    type: 'pattern',\r\n    pattern: 'solid',\r\n    fgColor: { argb: Colors.THEME_MAIN.split('#')[1] },\r\n  };\r\n  worksheet.getRow(1).font = { bold: true };\r\n  let level = 1;\r\n  addLevelColumn(worksheet, headerRow, level);\r\n  level += 1;\r\n  columns.forEach((column, i) => {\r\n    const width = column.getSize();\r\n    worksheet.getColumn(level).width = width !== undefined ? width / 6 : 20;\r\n    const cell = headerRow.getCell(level);\r\n    cell.value = columns[i].columnDef.header;\r\n    level += 1;\r\n  });\r\n  addFilter(worksheet, columns);\r\n};\r\n\r\nconst addLevelRow = (dataRow, row, level) => {\r\n  const levelCell = dataRow.getCell(level);\r\n  levelCell.value = row[LEVEL.id];\r\n  levelCell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n};\r\n\r\nexport const addRows = (workSheet, columns, rows) => {\r\n  const flatRows = flattenWithLevel(rows);\r\n  flatRows.forEach((row) => {\r\n    const dataRow = workSheet.addRow();\r\n    let level = 1;\r\n    addLevelRow(dataRow, row, level);\r\n    level += 1;\r\n    columns.forEach((column) => {\r\n      const cellValue = row[column.id];\r\n      const isDate = column.columnDef.header.includes('Date');\r\n      dataRow.getCell(level).value = isDate ? new Date(cellValue) : cellValue;\r\n      level += 1;\r\n    });\r\n  });\r\n  addConditions(workSheet, flatRows);\r\n};\r\n\r\nexport const saveExcel = (excelWorkbook, name) => {\r\n  excelWorkbook.xlsx.writeBuffer().then((buffer) => {\r\n    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), name);\r\n  });\r\n};\r\n\r\nexport const createExcel = (columns, rows) => {\r\n  const { title } = rows[0];\r\n  const excelWorkbook = createWorkbook();\r\n  const workSheet = createSheet(excelWorkbook, title);\r\n  addHeaders(workSheet, columns);\r\n  addRows(workSheet, columns, rows);\r\n  saveExcel(excelWorkbook, `Export_${title}.xlsx`);\r\n};\r\n\r\nexport const saveCSV = (excelWorkbook, name) => {\r\n  excelWorkbook.csv.writeBuffer().then((buffer) => {\r\n    saveAs(\r\n      new Blob([buffer], {\r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      }),\r\n      name\r\n    );\r\n  });\r\n};\r\n\r\nexport const createCSV = (columns, rows) => {\r\n  const { title } = rows[0];\r\n  const excelWorkbook = createWorkbook();\r\n  const workSheet = createSheet(excelWorkbook, title);\r\n  addHeaders(workSheet, columns);\r\n  addRows(workSheet, columns, rows);\r\n  saveCSV(excelWorkbook, `Export_${title}.csv`);\r\n};\r\n\r\nconst jsonToXml = (json, root = 'root') => {\r\n  let xml = `<${root}>`;\r\n  json.forEach((element) => {\r\n    xml += '<element>';\r\n    Object.keys(element).forEach((key) => {\r\n      const val = element[key];\r\n      const isObject = typeof val === 'object';\r\n      xml += isObject ? jsonToXml(val, key) : `<${key}>${val}</${key}>`;\r\n    });\r\n    xml += '</element>';\r\n  });\r\n  xml += `</${root}>`;\r\n  return xml;\r\n};\r\n\r\nconst formatXML = (sourceXml) => {\r\n  const xmlDoc = new DOMParser().parseFromString(sourceXml, 'application/xml');\r\n  const xsltDoc = new DOMParser().parseFromString(\r\n    [\r\n      // describes how we want to modify the XML - indent everything\r\n      '<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">',\r\n      '  <xsl:strip-space elements=\"*\"/>',\r\n      '  <xsl:template match=\"para[content-style][not(text())]\">', // change to just text() to strip space in text nodes\r\n      '    <xsl:value-of select=\"normalize-space(.)\"/>',\r\n      '  </xsl:template>',\r\n      '  <xsl:template match=\"node()|@*\">',\r\n      '    <xsl:copy><xsl:apply-templates select=\"node()|@*\"/></xsl:copy>',\r\n      '  </xsl:template>',\r\n      '  <xsl:output indent=\"yes\"/>',\r\n      '</xsl:stylesheet>',\r\n    ].join('\\n'),\r\n    'application/xml'\r\n  );\r\n  const xsltProcessor = new XSLTProcessor();\r\n  xsltProcessor.importStylesheet(xsltDoc);\r\n  const resultDoc = xsltProcessor.transformToDocument(xmlDoc);\r\n  const resultXml = new XMLSerializer().serializeToString(resultDoc);\r\n  return resultXml;\r\n};\r\n\r\nconst saveXML = (xml, name) => {\r\n  saveAs(new Blob([xml], { type: 'text/plain;charset=utf-8' }), name);\r\n};\r\n\r\nexport const createXML = (rows) => {\r\n  const xml = jsonToXml(rows);\r\n  const formattedXML = formatXML(xml);\r\n  saveXML(formattedXML, 'EBOM_Export.xml');\r\n};\r\n","import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport SimCardDownloadIcon from '@mui/icons-material/SimCardDownload';\r\nimport SnippetFolderIcon from '@mui/icons-material/SnippetFolder';\r\nimport TextSnippetIcon from '@mui/icons-material/TextSnippet';\r\nimport { Divider, MenuItem } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport toast from '../../helper/toast';\r\nimport StyledMenu from '../../Styles/StyledMenu';\r\nimport { createCSV, createExcel, createXML } from '../../utils/ExportUtils';\r\nimport { getColumnsAndRows } from '../../utils/TableUtils';\r\nimport TableButton from './TableButton';\r\n\r\nconst Export = ({ table }) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const csvExport = () => {\r\n    try {\r\n      const { columns, rows } = getColumnsAndRows(table);\r\n      createCSV(columns, rows);\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(error.message || error);\r\n    }\r\n  };\r\n\r\n  const excelExport = () => {\r\n    try {\r\n      const { columns, rows } = getColumnsAndRows(table);\r\n      createExcel(columns, rows);\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(error.message || error);\r\n    }\r\n  };\r\n\r\n  const xmlExport = () => {\r\n    try {\r\n      const { rows } = getColumnsAndRows(table);\r\n      createXML(rows);\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(error.message || error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableButton\r\n        onClick={(e) => setAnchorEl(e.currentTarget)}\r\n        endIcon={<KeyboardArrowDownIcon />}\r\n      >\r\n        Export\r\n      </TableButton>\r\n      <StyledMenu\r\n        keepMounted\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={() => setAnchorEl(null)}\r\n      >\r\n        <MenuItem onClick={excelExport} disableRipple>\r\n          <SimCardDownloadIcon />\r\n          Export Excel\r\n        </MenuItem>\r\n        <Divider />\r\n        <MenuItem onClick={csvExport} disableRipple>\r\n          <SnippetFolderIcon />\r\n          Export CSV\r\n        </MenuItem>\r\n        <Divider />\r\n        <MenuItem onClick={xmlExport} disableRipple>\r\n          <TextSnippetIcon />\r\n          Export XML\r\n        </MenuItem>\r\n      </StyledMenu>\r\n    </>\r\n  );\r\n};\r\n\r\nExport.propTypes = {\r\n  table: PropTypes.any.isRequired,\r\n};\r\nexport default Export;\r\n","import { Button } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst TableButton = ({ children, ...props }) => (\r\n  <Button variant=\"contained\" disableElevation {...props} size=\"small\">\r\n    {children}\r\n  </Button>\r\n);\r\n\r\nTableButton.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n};\r\nexport default TableButton;\r\n"],"names":["StyledMenu","styled","props","elevation","anchorOrigin","vertical","horizontal","transformOrigin","theme","borderRadius","marginTop","spacing","minWidth","color","palette","mode","grey","boxShadow","padding","fontSize","text","secondary","marginRight","backgroundColor","alpha","primary","main","action","selectedOpacity","LEVEL","createWorkbook","Excel","createSheet","excelWorkbook","name","addWorksheet","addHeaders","worksheet","columns","headerRow","addRow","fill","type","pattern","fgColor","argb","Colors","getRow","font","bold","level","levelColumn","getColumn","width","style","getCell","value","addLevelColumn","forEach","column","i","getSize","undefined","columnDef","header","workSheet","autoFilter","from","row","to","length","views","state","ySplit","xSplit","addFilter","addRows","rows","flatRows","flattenWithLevel","dataRow","levelCell","alignment","addLevelRow","cellValue","id","isDate","includes","Date","size","console","log","addConditionalFormatting","ref","rules","formulae","bgColor","addConditions","createExcel","title","xlsx","writeBuffer","then","buffer","saveAs","Blob","saveExcel","createCSV","csv","saveCSV","jsonToXml","json","root","xml","element","Object","keys","key","val","createXML","saveXML","sourceXml","xmlDoc","DOMParser","parseFromString","xsltDoc","join","xsltProcessor","XSLTProcessor","importStylesheet","resultDoc","transformToDocument","XMLSerializer","serializeToString","formatXML","table","React","anchorEl","setAnchorEl","TableButton","onClick","e","currentTarget","endIcon","KeyboardArrowDown","keepMounted","open","Boolean","onClose","MenuItem","getColumnsAndRows","error","toast","message","disableRipple","SimCardDownload","Divider","SnippetFolder","TextSnippet","children","variant","disableElevation"],"sourceRoot":""}